1. 抽象类 : abstract
    修饰符 abstract 返回值类型 方法名(形参列表);

    修饰符 abstract class 类名{}

    注意事项 :
        1. 抽象类不能实例化
        2. 抽象类中可以有抽象方法也可以有非抽象方法, 但是抽象方法必须存在抽象类中
            抽象方法    : 提供规则,让子类必须重写
            非抽象方法   : 让子类继承,提高代码的复用性
        3. 抽象类中存在构造方法 , 让子类去访问抽象类的构造,给抽象类中的属性初始化
        4. 抽象类的子类,要么重写所有的抽象方法,要么子类是一个抽象类

2. 多态
    面向对象三大特征 : 封装 继承 多态

    多态 : 父类的引用指向子类的对象   Animal a = new Dog();
    多态对象访问成员方法 : 编译看左边(父类型) , 执行看右边(子类型)

    作用 :
        1. 可以切换不同的业务
            Animal a = new Cat();
            a.run();
        2. 方法的形参是一个父类型 , 那么此方法可以接收此类对象或者此类的子类型对象
            public static void method(Person a){

            }

        多态的优点 : 提高代码的扩展性
        多态的缺点 : 多态对象不能使用子类的特有功能

        多态的转型 :
            1. 向上转型 : 把子类类型对象赋值给了父类类型的变量     Animal a = new Dog();
            2. 向下转型 : 把父类类型对象赋值给子类类型的变量, 向下转型后就可以调用子类特有功能       Dog d = (Dog)a;

        Animal a = new Dog();
        Cat d = (Cat)a; // 存在异常 ClassCastException : 类型转换异常
        产生的原因 : 转换的类型和对象本质类型不一致
        避免此问题需要学习 instanceof

        对象 instanceof 数据类型 : 判断一个对象是都属于指定的数据类型 , 结果是一个 boolean 类型的值
        if(a instanceof Cat){
            Cat c = (Cat)a;
        }

3. 接口 : 定义规则

    public interface 接口名(){
        都是抽象方法(JDK8前)
    }

    注意事项 :
        1. 接口不能实例化
        2. 类和接口实现关系 , 一个类可以实现多个接口
            public class 类名 implements 接口A , 接口B{

            }
        3. 接口的子类叫实现类 , 实现类需要重写接口中所有的抽象方法 , 要么实现类是一个抽象类

    类与类 : 只能单继承 , 不能多继承 , 可以多层继承
    类与接口 : 一个类可以实现一个接口 , 也可以实现多个接口 ,  还可以继承一个类的同时实现多个接口
    接口与接口 : 可以单继承 , 可以多继承 , 还可以多层继承