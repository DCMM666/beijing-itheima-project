面相对象三大特征
    类   : 设计图,模板
    对象  : 真是存在事物
    Student s1 = new Student("张三" , 23 , "男");
    Student s2 = new Student("李四" , 24 , "男");

    1. 封装 : 隐藏实现细节 , 对外提供公共的访问方式
        private : 被 private 修饰的成员只能在本类中访问
        创建对象方式 1 : 空参构造 + set
        创建对象方式 2 : 全参构造

    2. 继承 : 多个类中出现了共性的代码,可以使用继承技术提高代码的复用性
        子类可以使用父类所有非私有的成员
        成员变量和成员方法访问 : 就近原则

    3.  多态 :
        优点 : 提高代码的扩展性
        缺点 : 不能访问子类的特有功能

        public void show(Person s){// Person s = new Student();
            s.method1();

            // 学生特有的方法 method2
            if(s instanceof Student){
                 Student stu = (Student)s;
                 stu.method2();
            }
        }


抽象类
    抽象方法 ---> 抽象类
    为啥有抽象方法 ? 因为方法体无法确定,需要子类进行重写完善 - 规则

    注意事项:
        1. 抽象方法不能创建对象
        2. 抽象类的子类需要重写所有的抽象方法

接口 : 定义规则

    什么时候用接口 ? 一个类中所有的方法抽象抽象的,那么就不应该定义类, 应该改成接口

    注意事项:
        1. 抽象方法不能创建对象
        2. 需要使用接口的子类-实现类
        3. 实现类需要把接口中所有的抽象方法重写

    JDK8 : 默认  ,  静态
    JDK9 : 私有