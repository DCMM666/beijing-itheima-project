 1. 随机数 Random 类
    第一步 : 导包 import java.util.Random;
    第二步 : 创建对象 Random r = new Random();
    第三步 : 产生随机数 int num = r.nextInt(随机数的范围);    [0,随机数的范围)


 2. 数组
    概述 : 可以存储多个同种类型数据的容器
    初始化
        1.动态初始化 : 数据类型[] 数组名 = new 数据类型[数组的长度];
                   int[] arr = new int[3];
        2.静态初始化 :
                完整格式 : 数据类型[] 数组名 = new 数据类型[]{元素 , 元素 , 元素 ....};
                          int[] arr = new int[]{11,22,33,44,55};
                简化格式 : 数据类型[] 数组名 = {元素 , 元素 , 元素 ....};
                          int[] arr = {11,22,33,44,55};
    取值 : 数组名[索引]
    修改 : 数组名[索引] = 新值
    索引 : 数组中元素的编号,编号是从 0 开始,逐个加一,最大的索引是数组的长度-1
    数组的长度可以动态获取 : 数组名.length

    数组的遍历
        for(int 索引名 = 0 ; 索引名 < 数组名.length ; 索引名++){
              数组名[索引名] --> 打印,求和,计算,求最大值....
        }


方法概述 : 可以完成某个特定功能的代码块
方法好处 : 可以提高代码的复用性
方法的格式
    1. 有具体返回值的方法
    修饰符 返回值类型 方法名(参数列表){
        方法体;
        return 返回值;
    }
    调用 :
        1. 直接调用 : 方法名(参数);                          暂时没有意义!
        2. 赋值调用 : 返回值类型 变量名 = 方法名(参数);         推荐使用!
        3. 输出调用 : System.out.println(方法名(参数));      方便查看方法的返回值

    2. 无具体返回值的方法(void)
      修饰符 void 方法名(参数列表){
           方法体;
      }
        调用 :
        1. 直接调用 : 方法名(参数);

方法的重载
方法执行的原理
方法的案例

